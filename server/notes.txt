df['date'] = df['transaction_date'].dt.date
df['signed_qty'] = df.apply(lambda x: x['quantity'] if x['transaction_type']=='buy' else -x['quantity'], axis=1)

daily_positions = (
    df.groupby(['date', 'symbol'])['signed_qty'].sum()
    .groupby(level=1).cumsum().reset_index()
)
daily_positions.rename(columns={'signed_qty':'shares'}, inplace=True)

# --- 3. Build full date range for last year ---
start_date = datetime.today().date() - timedelta(days=365)
date_range = pd.date_range(start=start_date, end=datetime.today().date())

# --- 4. Fetch Yahoo Finance prices & compute daily values ---
portfolio_values = pd.DataFrame(index=date_range)

for symbol in daily_positions['symbol'].unique():
    hist = yf.download(symbol, start=start_date, end=datetime.today().date())['Close']
    hist.index = hist.index.date
    symbol_positions = daily_positions[daily_positions['symbol'] == symbol].set_index('date').reindex(date_range, method='ffill').fillna(0)
    portfolio_values[symbol] = symbol_positions['shares'] * hist.reindex(date_range).fillna(method='ffill')

portfolio_values['total_value'] = portfolio_values.sum(axis=1)

# --- 5. Convert to JSON-serializable dict ---
time_series_dict = portfolio_values['total_value'].reset_index().rename(columns={'index':'date', 'total_value':'value'})
result = time_series_dict.to_dict(orient='records')